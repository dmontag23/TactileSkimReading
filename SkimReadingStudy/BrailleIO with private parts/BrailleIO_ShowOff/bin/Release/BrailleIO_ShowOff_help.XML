<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BrailleIO_ShowOff</name>
    </assembly>
    <members>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.InitializeBrailleIO(BrailleIO.Interface.IBrailleIOAdapterManager,System.Boolean)">
            <summary>
            Initializes the BrailleIO framework. Build a new BrailleIOAdapter_ShowOff, and add it to the IBrailleIOAdapterManager.
            </summary>
            <param name="adapterManager">The adapter manager to use for managing devices.</param>
            <returns>The created BrailleIOAdapter_ShowOff, that was build with this instance</returns>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.InitializeBrailleIO(System.Boolean)">
            <summary>
            Initializes the BrailleIO framework. Build a new BrailleIOAdapter_ShowOff, and add it to the global IBrailleIOAdapterManager.
            </summary>
            <returns>The created BrailleIOAdapter_ShowOff, that was build with this instance</returns>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.GetAdapter(BrailleIO.Interface.IBrailleIOAdapterManager)">
            <summary>
            creates a new <see cref="T:BrailleIO.BrailleIOAdapter_ShowOff"/> and returns it
            </summary>
            <param name="manager">the corresponding adapter manager</param>
            <returns>a new "BrailleIOAdapter_ShowOff adapter</returns>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.PaintTouchMatrix(System.Double[0:,0:])">
            <summary>
            Paints the touch matrix over the matrix image.
            </summary>
            <param name="touchMatrix">The touch matrix.</param>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.SetPictureOverlay(System.Drawing.Image)">
            <summary>
            Sets an overlay picture will be displayed as topmost 
            - so beware to use a transparent background when using this 
            overlay functionality.
            </summary>
            <param name="image">The image to be displayed as an overlay.</param>
            <returns><c>true</c> if the image could been set, otherwise <c>false</c></returns>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.GetPictureOverlay">
            <summary>
            Gets the current overlay image.
            </summary>
            <returns>the current set overlay image or <c>null</c></returns>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.SetStatusText(System.String)">
            <summary>
            Sets the text in the status bar.
            </summary>
            <param name="text">The text to display in the status bar.</param>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.ResetStatusText">
            <summary>
            Resets the text in the status bar.
            </summary>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.MarkButtonAsPressed(System.Collections.Generic.List{System.String})">
            <summary>
            Marks the button as pressed.
            </summary>
            <param name="pressedButtons">The pressed buttons.</param>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.UnmarkButtons(System.Collections.Generic.List{System.String})">
            <summary>
            Reset the buttons to normal mode.
            </summary>
            <param name="releasedButtons">The released buttons.</param>
        </member>
        <member name="M:BrailleIO.IBrailleIOShowOffMonitor.Paint(System.Boolean[0:,0:])">
            <summary>
            Paints the specified matrix to the GUI.
            </summary>
            <param name="m">The pin matrix.</param>
        </member>
        <member name="P:BrailleIO.IBrailleIOShowOffMonitor.PictureOverlaySize">
            <summary>
            Gets the size of the picture overlay image.
            </summary>
            <value>The size of the overlay image.</value>
        </member>
        <member name="F:BrailleIO.ShowOff.pixelFactor">
            <summary>
            Factor for pins to pixels
            </summary>
        </member>
        <member name="M:BrailleIO.ShowOff.MarkButtonAsPressed(System.Collections.Generic.List{System.String})">
            <summary>
            Marks the button as pressed.
            </summary>
            <param name="pressedButtons">The pressed buttons.</param>
        </member>
        <member name="M:BrailleIO.ShowOff.UnmarkButtons(System.Collections.Generic.List{System.String})">
            <summary>
            Reset the buttons to normal mode.
            </summary>
            <param name="releasedButtons">The released buttons.</param>
        </member>
        <member name="F:BrailleIO.ShowOff.MartixStack">
            <summary>
            Stack for incoming pin matrix stats to display on the 'device'
            </summary>
        </member>
        <member name="F:BrailleIO.ShowOff._baseImg">
            <summary>
            Image of the device dot matrix and the touch module matrix - basement layer
            </summary>
        </member>
        <member name="F:BrailleIO.ShowOff.renderTimer">
            <summary>
            a which init a new paint of the pin state matrix
            </summary>
        </member>
        <member name="M:BrailleIO.ShowOff.invokePictureBoxImageChange(System.Windows.Forms.PictureBox,System.Drawing.Image)">
            <summary>
            Invokes the picture box image change.
            </summary>
            <param name="picBox">The picturebox.</param>
            <param name="im">The image to show.</param>
            <returns></returns>
        </member>
        <member name="M:BrailleIO.ShowOff.invokeGetImageOfPictureBox(System.Windows.Forms.PictureBox)">
            <summary>
            Invokes the getter  for the image of a picture box.
            </summary>
            <param name="picBox">The picture box.</param>
            <returns>the image of the picture box or <c>null</c></returns>
        </member>
        <member name="M:BrailleIO.ShowOff.renderTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handles the Elapsed event of the renderTimer control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BrailleIO.ShowOff.generateBaseImage(System.Int32,System.Int32)">
            <summary>
            Generates a base image of this virtual pin matrix.
            </summary>
            <param name="rerender">if set to <c>true</c> [rerender].</param>
            <param name="Width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:BrailleIO.ShowOff.Paint(System.Boolean[0:,0:])">
            <summary>
            Paints the specified matrix to the GUI.
            </summary>
            <param name="m">The pin matrix.</param>
        </member>
        <member name="M:BrailleIO.ShowOff.getPinMatrixImage(System.Boolean[0:,0:])">
            <summary>
            Renders the pin matrix to an image.
            </summary>
            <param name="m">The martix to render.</param>
            <returns>a Bitmap of the matrix to render</returns>
        </member>
        <member name="M:BrailleIO.ShowOff.getTouchImage">
            <summary>
            Gets a image representing the touched pins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrailleIO.ShowOff.getPinForPoint(System.Drawing.Point)">
            <summary>
            Converts a pixel point into a pin
            </summary>
            <param name="p">The mouse point in pixel.</param>
            <returns></returns>
        </member>
        <member name="M:BrailleIO.ShowOff.buildTouchMatrix(System.Collections.Generic.List{BrailleIO.Touch})">
            <summary>
            Builds the touch matrix from a list of points.
            </summary>
            <param name="touches">The touches.</param>
            <returns></returns>
        </member>
        <member name="M:BrailleIO.ShowOff.handleEllipsePoints(System.Drawing.Point)">
            <summary>
            Handles the ellipse points.
            </summary>
            <param name="p">The touch.</param>
            <param name="matrix">The matrix where the points where added.</param>
        </member>
        <member name="M:BrailleIO.ShowOff.PointIsInsideEllipse(System.Drawing.Point,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [the specified pointToCheck] [is inside the ellipse].
            The region (disk) bounded by the ellipse is given by the equation:
            
            having an ellipse centered at (c_x,c_y), with semi-major axis r_x, semi-minor axis r_y, 
            both aligned with the Cartesian plane.
            
                (x−c_x)^2         (y−c_y)^2
               ___________   +   ___________   ≤   1      (1)
                 r_x ^2            r_y ^2     
            
            So given a test point (x,y), plug it in (1). If the inequality is satisfied, 
            then it is inside the ellipse; otherwise it is outside the ellipse. 
            
            Moreover, the point is on the boundary of the region (i.e., on the ellipse) 
            if and only if the inequality is satisfied tightly 
            (i.e., the left hand side evaluates to 1)
            
            </summary>
            <param name="pointToCheck">The point to check.</param>
            <param name="ellipsePos">The ellipse pos.</param>
            <param name="r_x">1/2 width of the ellipse.</param>
            <param name="r_y">1/2 height of the ellipse.</param>
            <returns>Value must be smaller or equal to 1 - than the point is inside the ellipse, otherwise it is outside</returns>
        </member>
        <member name="M:BrailleIO.ShowOff.InitForm">
            <summary>
            Important function! Call this if you don't rum the ShowOffAdapter out of an windows form application.
            </summary>
        </member>
        <member name="M:BrailleIO.ShowOff.InitializeBrailleIO(BrailleIO.Interface.IBrailleIOAdapterManager,System.Boolean)">
            <summary>
            Initializes the BrailleIO framework. Build a new BrailleIOAdapter_ShowOff, and add it to the IBrailleIOAdapterManager.
            </summary>
            <param name="adapterManager">The adapter manager to use for managing devices.</param>
            <returns>The created BrailleIOAdapter_ShowOff, that was build with this instance</returns>
        </member>
        <member name="M:BrailleIO.ShowOff.InitializeBrailleIO(System.Boolean)">
            <summary>
            Initializes the BrailleIO framework. Build a new BrailleIOAdapter_ShowOff, and add it to the global IBrailleIOAdapterManager.
            </summary>
            <returns>The created BrailleIOAdapter_ShowOff, that was build with this instance</returns>
        </member>
        <member name="M:BrailleIO.ShowOff.PaintTouchMatrix(System.Double[0:,0:])">
            <summary>
            Paints the touch matrix over the matrix image.
            </summary>
            <param name="touchMatrix">The touch matrix.</param>
        </member>
        <member name="M:BrailleIO.ShowOff.SetPictureOverlay(System.Drawing.Image)">
            <summary>
            Sets an overlay picture will be displayed as topmost 
            - so beware to use a transparent background when using this 
            overlay functionality.
            </summary>
            <param name="image">The image to be displayed as an overlay.</param>
            <returns><c>true</c> if the image could been set, otherwise <c>false</c></returns>
        </member>
        <member name="M:BrailleIO.ShowOff.ResetPictureOverlay">
            <summary>
            Resets the picture overlay to an invisible overlay.
            </summary>
        </member>
        <member name="M:BrailleIO.ShowOff.GetPictureOverlay">
            <summary>
            Gets the current overlay image.
            </summary>
            <returns>the current set overlay image or <c>null</c></returns>
        </member>
        <member name="M:BrailleIO.ShowOff.SetStatusText(System.String)">
            <summary>
            Sets the text in the status bar.
            </summary>
            <param name="text">The text to display in the status bar.</param>
        </member>
        <member name="M:BrailleIO.ShowOff.ResetStatusText">
            <summary>
            Resets the text in the status bar.
            </summary>
        </member>
        <member name="F:BrailleIO.ShowOff.components">
            <summary>
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:BrailleIO.ShowOff.Dispose(System.Boolean)">
            <summary>
            Verwendete Ressourcen bereinigen.
            </summary>
            <param name="disposing">True, wenn verwaltete Ressourcen gelöscht werden sollen; andernfalls False.</param>
        </member>
        <member name="M:BrailleIO.ShowOff.InitializeComponent">
            <summary>
            Erforderliche Methode für die Designerunterstützung.
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:BrailleIO.ShowOff.PictureOverlaySize">
            <summary>
            Gets the size of the picture overlay image.
            </summary>
            <value>The size of the overlay image.</value>
        </member>
        <member name="M:BrailleIO.Program.Main">
            <summary>
            Der Haupteinstiegspunkt für die Anwendung.
            </summary>
        </member>
        <member name="T:BrailleIO.MockDriver">
            <summary>
            Driver to emulate an real hardware driver that is responsible for sending the bool matrix to the hardware device
            </summary>
        </member>
        <member name="F:BrailleIO.MockDriver.Monitor">
            <summary>
            The Windows Forms Application that should display the matrix. It is the Emulation of the presenting hardware.
            </summary>
        </member>
        <member name="M:BrailleIO.MockDriver.SetMatrix(System.Boolean[0:,0:])">
            <summary>
            Sends the Matrix to the windows forms application to display
            </summary>
            <param name="m">The m.</param>
        </member>
        <member name="T:BrailleIO.BrailleIOAdapter_ShowOff">
            <summary>
            Software emulation of a Metec BrailleDis 7200 display. 
            It enables Developers to emulate a real pin matrix device or can be used 
            as debug monitor for displaying inputs on a real connected BrailleDis device.
            </summary>
        </member>
        <member name="F:BrailleIO.BrailleIOAdapter_ShowOff.driver">
            <summary>
            The driver emulator that send the matrix to the windows forms application
            </summary>
        </member>
        <member name="M:BrailleIO.BrailleIOAdapter_ShowOff.#ctor(BrailleIO.Interface.IBrailleIOAdapterManager,BrailleIO.ShowOff)">
            <summary>
            Initializes a new instance of the <see cref="T:BrailleIO.BrailleIOAdapter_ShowOff"/> class.
            </summary>
            <param name="manager">The IBrailleIOAdapterManager the device hase to be registerd to.</param>
            <param name="gui">The ShowOff windows forms application that is used as displaying or user interaction GUI.</param>
        </member>
        <member name="M:BrailleIO.BrailleIOAdapter_ShowOff.#ctor(BrailleIO.Interface.IBrailleIOAdapterManager)">
            <summary>
            Initializes a new instance of the <see cref="T:BrailleIO.BrailleIOAdapter_ShowOff"/> class.
            </summary>
            <param name="manager">The IBrailleIOAdapterManager the device hase to be registerd to.</param>
        </member>
        <member name="T:BrailleIO_ShowOff.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:BrailleIO_ShowOff.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:BrailleIO_ShowOff.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:BrailleIO_ShowOff.Properties.Resources.base_error">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:BrailleIO_ShowOff.Properties.Resources.overlay_error">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:BrailleIO_ShowOff.Properties.Resources.pin_error">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:BrailleIO_ShowOff.Properties.Resources.touch_error">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
